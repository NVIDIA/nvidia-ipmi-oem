#!/usr/bin/env bash

set -o pipefail

############### App Constants ###############
APPNAME=setup_bldenv
APPVER=0.1

############### Definitions ###############
DEFUSR=nobody
DEFGRP=nogroup

get_realuser()
{
	local RUSR;RUSR=`logname 2>/dev/null`
	[ $? -ne 0 ] || [ -z "$RUSR" ] && RUSR=${LOGNAME}
	[ -z "$RUSR" ] && RUSR=${USER}
	[ -z "$RUSR" ] && RUSR=${DEFUSR}
	echo $RUSR
}

get_realgroup() # (user)
{
	local USR=$1
	[ -z "$USR" ] && USR=${DEFUSR}
	if [ "${DEFUSR}" = "$USR" ]; then
		echo "${DEFGRP}"
		return 0
	fi
	local GRP;GRP=`groups "$USR" 2>/dev/null | cut -d' ' -f3`
	[ $? -ne 0 ] || [ -z "$GRP" ] && GRP=${DEFGRP}
	echo $GRP
}

REALUSER=`get_realuser`
REALGROUP=`get_realgroup "${REALUSER}"`
LOGPATH=/tmp/${REALUSER}_${APPNAME}_$$
LG_TMP=tmp.log
LG_APP=app.log
APP_TMP=${LOGPATH}/${LG_TMP}
APP_LOG=${LOGPATH}/${LG_APP}

# Enable this for dryrun
#RUN=echo

############### Constants ###############


############### Functions ###############
show_help()
{
	echo "A Tool to Setup Code Building Environment for NV GPU Manager, Ver=${APPVER}"
	echo "<usage>"
	echo "	sudo ./${APPNAME}"
	echo
}

### Logging Module
initlog()
{
	[ -d ${LOGPATH} ] || mkdir -p ${LOGPATH}
}

log() # (string...)
{
	local OPT
	if [ "$1" == "-n" ]; then
		OPT="-n"
		shift
	else
		OPT=""
	fi
	local MSG="`date '+[%Y-%m-%d %H:%M:%S]'` $*"
	#echo $OPT $MSG
	echo $OPT $MSG >> ${APP_LOG}
}

echo_log() # (string...)
{
	local MSG=$*
	echo $MSG
	log $MSG
}

cleanup()
{
	[ -d "${LOGPATH}" ] || return
	log "Cleanup log files..."
	rm -rf ${LOGPATH}
	set +o pipefail
}

### Common
common_get_sdk()
{
	local URL="https://openpower.xyz/job/openbmc-build-sdk/distro=ubuntu,target=romulus/lastSuccessfulBuild/artifact/deploy/sdk/oecore-x86_64-arm1176jzs-toolchain-nodistro.0.sh"
	local BN=`basename $URL`

	wget $URL
	chmod u+x $BN
	./$BN
}

common_presetup()
{
	return 0
}

common_setup()
{
	common_get_sdk
}

prereqst="wget vim git build-essential libsdl1.2-dev texinfo gawk chrpath diffstat python2.7 python3"
bld_pkg="git g++ autoconf autoconf-archive pkg-config libtool-bin doxygen"

### Ubuntu
ubuntu_get_build_tool()
{
	echo "Setup build tools for Ubuntu..."
	$RUN apt --assume-yes install $bld_pkg
}

ubuntu_presetup()
{
	$RUN apt update
	$RUN apt --assume-yes install $prereqst
}

ubuntu_setup()
{
	ubuntu_get_build_tool
}

### Cygwin
cygwin_presetup()
{
	echo "[W] Please install below packages manually!"
	for p in $prereqst; do echo $p; done
	return 1
}

cygwin_setup()
{
	echo "[W] Please install below packages manually!"
	for p in $bld_pkg; do echo $p; done
	return 1
}

### Unknown
unknown_presetup()
{
	echo "[E]Not supported OS type!"
	return 1
}

unknown_setup()
{
	echo "[E]Not supported OS type!"
	return 1
}

### OS Detection
get_os_name()
{
	local VAL=`uname -a`

	echo "$VAL" | grep -i "ubuntu" &>/dev/null && echo "ubuntu" && return 0
	echo "$VAL" | grep -i "raspberrypi" &>/dev/null && echo "ubuntu" && return 0
	echo "$VAL" | grep -i "cygwin" &>/dev/null && echo "cygwin" && return 0

	echo "unknown"
}

# ============= MAIN ==============
trap cleanup EXIT
initlog

# (Main logic here)
OSTYPE=`get_os_name`

if [ "$OSTYPE" != "cygwin" ]; then
	if [ `whoami` != "root" ]; then
		echo "[E]Please run this script with root!"
		show_help
		exit 1
	fi
fi

${OSTYPE}_presetup || exit $?
for OS in common $OSTYPE; do
	${OS}_setup || exit $?
done

exit $?
cleanup
